// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function map(f, data) {
  if (typeof data === "number") {
    if (data === 0) {
      return /* NotAsked */0;
    } else {
      return /* Loading */1;
    }
  } else if (data.tag) {
    return /* Success */Block.__(1, [Curry._1(f, data[0])]);
  } else {
    return /* Failure */Block.__(0, [data[0]]);
  }
}

function andMap(wrappedValue, wrappedFunction) {
  if (typeof wrappedFunction === "number") {
    if (wrappedFunction === 0) {
      return /* NotAsked */0;
    } else {
      return /* Loading */1;
    }
  } else if (wrappedFunction.tag) {
    return map(wrappedFunction[0], wrappedValue);
  } else {
    return /* Failure */Block.__(0, [wrappedFunction[0]]);
  }
}

function map2(f, a, b) {
  return andMap(b, map(f, a));
}

function map3(f, a, b, c) {
  return andMap(c, andMap(b, map(f, a)));
}

function mapError(f, data) {
  if (typeof data === "number") {
    if (data === 0) {
      return /* NotAsked */0;
    } else {
      return /* Loading */1;
    }
  } else if (data.tag) {
    return /* Success */Block.__(1, [data[0]]);
  } else {
    return /* Failure */Block.__(0, [Curry._1(f, data[0])]);
  }
}

function mapBoth(successFn, failureFn, data) {
  if (typeof data === "number") {
    if (data === 0) {
      return /* NotAsked */0;
    } else {
      return /* Loading */1;
    }
  } else if (data.tag) {
    return /* Success */Block.__(1, [Curry._1(successFn, data[0])]);
  } else {
    return /* Failure */Block.__(0, [Curry._1(failureFn, data[0])]);
  }
}

function andThen(f, data) {
  if (typeof data === "number") {
    if (data === 0) {
      return /* NotAsked */0;
    } else {
      return /* Loading */1;
    }
  } else if (data.tag) {
    return Curry._1(f, data[0]);
  } else {
    return /* Failure */Block.__(0, [data[0]]);
  }
}

function withDefault($$default, data) {
  if (typeof data === "number" || data.tag !== 1) {
    return $$default;
  } else {
    return data[0];
  }
}

function toOption(data) {
  return withDefault(undefined, map((function (a) {
                    return Caml_option.some(a);
                  }), data));
}

function fromOption(option, errorMsg) {
  if (option !== undefined) {
    return /* Success */Block.__(1, [Caml_option.valFromOption(option)]);
  } else {
    return /* Failure */Block.__(0, [errorMsg]);
  }
}

function append(a, b) {
  return andMap(b, map((function (x, y) {
                    return /* tuple */[
                            x,
                            y
                          ];
                  }), a));
}

function succeed(a) {
  return /* Success */Block.__(1, [a]);
}

function isSuccess(data) {
  if (typeof data === "number" || data.tag !== 1) {
    return false;
  } else {
    return true;
  }
}

function isFailure(data) {
  if (typeof data === "number" || data.tag) {
    return false;
  } else {
    return true;
  }
}

function isLoading(data) {
  if (typeof data === "number") {
    return data !== 0;
  } else {
    return false;
  }
}

function isNotAsked(data) {
  if (typeof data === "number") {
    return data === 0;
  } else {
    return false;
  }
}

exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.mapError = mapError;
exports.mapBoth = mapBoth;
exports.andThen = andThen;
exports.withDefault = withDefault;
exports.toOption = toOption;
exports.fromOption = fromOption;
exports.append = append;
exports.andMap = andMap;
exports.succeed = succeed;
exports.isSuccess = isSuccess;
exports.isFailure = isFailure;
exports.isLoading = isLoading;
exports.isNotAsked = isNotAsked;
/* No side effect */
